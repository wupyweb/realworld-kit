// Code generated by ent, DO NOT EDIT.

package favorite

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wupyweb/realworld-kit/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldID, id))
}

// FavoritedAt applies equality check predicate on the "favorited_at" field. It's identical to FavoritedAtEQ.
func FavoritedAt(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldFavoritedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldUserID, v))
}

// ArticleID applies equality check predicate on the "article_id" field. It's identical to ArticleIDEQ.
func ArticleID(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldArticleID, v))
}

// FavoritedAtEQ applies the EQ predicate on the "favorited_at" field.
func FavoritedAtEQ(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldFavoritedAt, v))
}

// FavoritedAtNEQ applies the NEQ predicate on the "favorited_at" field.
func FavoritedAtNEQ(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldFavoritedAt, v))
}

// FavoritedAtIn applies the In predicate on the "favorited_at" field.
func FavoritedAtIn(vs ...time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldFavoritedAt, vs...))
}

// FavoritedAtNotIn applies the NotIn predicate on the "favorited_at" field.
func FavoritedAtNotIn(vs ...time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldFavoritedAt, vs...))
}

// FavoritedAtGT applies the GT predicate on the "favorited_at" field.
func FavoritedAtGT(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldGT(FieldFavoritedAt, v))
}

// FavoritedAtGTE applies the GTE predicate on the "favorited_at" field.
func FavoritedAtGTE(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldGTE(FieldFavoritedAt, v))
}

// FavoritedAtLT applies the LT predicate on the "favorited_at" field.
func FavoritedAtLT(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldLT(FieldFavoritedAt, v))
}

// FavoritedAtLTE applies the LTE predicate on the "favorited_at" field.
func FavoritedAtLTE(v time.Time) predicate.Favorite {
	return predicate.Favorite(sql.FieldLTE(FieldFavoritedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldUserID, vs...))
}

// ArticleIDEQ applies the EQ predicate on the "article_id" field.
func ArticleIDEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldEQ(FieldArticleID, v))
}

// ArticleIDNEQ applies the NEQ predicate on the "article_id" field.
func ArticleIDNEQ(v int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNEQ(FieldArticleID, v))
}

// ArticleIDIn applies the In predicate on the "article_id" field.
func ArticleIDIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldIn(FieldArticleID, vs...))
}

// ArticleIDNotIn applies the NotIn predicate on the "article_id" field.
func ArticleIDNotIn(vs ...int) predicate.Favorite {
	return predicate.Favorite(sql.FieldNotIn(FieldArticleID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasArticle applies the HasEdge predicate on the "article" edge.
func HasArticle() predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ArticleTable, ArticleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasArticleWith applies the HasEdge predicate on the "article" edge with a given conditions (other predicates).
func HasArticleWith(preds ...predicate.Article) predicate.Favorite {
	return predicate.Favorite(func(s *sql.Selector) {
		step := newArticleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Favorite) predicate.Favorite {
	return predicate.Favorite(sql.NotPredicates(p))
}
